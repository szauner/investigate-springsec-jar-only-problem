#*** This is the main configuration property file. ***#
# Profile specific configuration is possible by creating additional files that are name using the specific profile's
# name, e.g. 'application-production.properties'. Properties in such files will overwrite properties having the same
# key in this file. There are several other possibilites to externalise properties:
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html

# Profiles to be used by Spring
# Find definition of profiles in Profiles.java
# Setting the development profile here is a convenience configuration for developers. This way it is not
# necessary to define profiles via command line java runtime parameters. However when running the application
# in another environment like staging or production of course it is necessary to define the appropriate profiles.
# That should be done by using command line java runtime parameter 'spring.profiles.active' which will overwrite
# the property here(like this: 'java -jar -Dspring.profiles.active=production application.jar'). Also note that 
# additional profiles can be activated by using the java runtime property 'spring.profiles.include'. This will
# not overwrite the profile(s) defined here but ad additional profiles to it (them).
spring.profiles.active=development


### Service specific configuration ###
# validity timespan of a registration verification token in minutes
service.verification.expiration=1440
# validity timespan of a password reset token in minutes
service.password.reset.expiration=1440
# OAuth2 access token expiration time span in seconds
service.authentication.access.expiration=3600
# OAuth2 refresh token expiration time span in seconds
service.authentication.refresh.expiration=86400
#encryption
service.encryptor.algorithm=PBEWithHMACSHA512AndAES_256
service.encryptor.poolsize=4
service.encryptor.password=example


### Common logging configuration ###
logging.jersey.loggername=JerseyRequestLogger
logging.jersey.maxentitysize=32768

### Cross Origin Request Sharing Configuration ###
http.cors.allowedOrigins=*
http.cors.allowedMethods=GET,POST,PUT,DELETE,OPTIONS,HEAD
http.cors.allowedHeaders=Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,Authorization
http.cors.exposedHeaders=Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,Authorization
http.cors.allowCredentials=true
#maxAge is given in seconds (86400 = 24h)
http.cors.maxAge=86400


### Spring Configuration ###
## extended logging configuration ##
# When the debug/trace mode is enabled, a selection of core loggers (embedded container, Hibernate 
# and Spring Boot) are configured to output more information. Enabling the debug/trace mode does 
# not configure your application to log all messages with DEBUG level!
# Note! For some reason those additional messages are not affected by log4j2 configuration. So be aware,
# that if debug and trace are set to true here, there will be a lot of debug output.
debug=false
trace=false
spring.output.ansi.enabled=DETECT

## JPA configuration ##
spring.jpa.open-in-view=false
